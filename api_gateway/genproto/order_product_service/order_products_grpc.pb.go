// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: order_products.proto

package order_product_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderProducts_Create_FullMethodName  = "/order_products.OrderProducts/Create"
	OrderProducts_GetById_FullMethodName = "/order_products.OrderProducts/GetById"
	OrderProducts_GetAll_FullMethodName  = "/order_products.OrderProducts/GetAll"
	OrderProducts_Update_FullMethodName  = "/order_products.OrderProducts/Update"
	OrderProducts_Delete_FullMethodName  = "/order_products.OrderProducts/Delete"
)

// OrderProductsClient is the client API for OrderProducts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderProductsClient interface {
	Create(ctx context.Context, in *CreateOrderProduct, opts ...grpc.CallOption) (*OrderProduct, error)
	GetById(ctx context.Context, in *OrderProductPrimaryKey, opts ...grpc.CallOption) (*OrderProduct, error)
	GetAll(ctx context.Context, in *GetListOrderProductRequest, opts ...grpc.CallOption) (*GetListOrderProductResponse, error)
	Update(ctx context.Context, in *UpdateOrderProduct, opts ...grpc.CallOption) (*OrderProduct, error)
	Delete(ctx context.Context, in *OrderProductPrimaryKey, opts ...grpc.CallOption) (*Empty, error)
}

type orderProductsClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderProductsClient(cc grpc.ClientConnInterface) OrderProductsClient {
	return &orderProductsClient{cc}
}

func (c *orderProductsClient) Create(ctx context.Context, in *CreateOrderProduct, opts ...grpc.CallOption) (*OrderProduct, error) {
	out := new(OrderProduct)
	err := c.cc.Invoke(ctx, OrderProducts_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderProductsClient) GetById(ctx context.Context, in *OrderProductPrimaryKey, opts ...grpc.CallOption) (*OrderProduct, error) {
	out := new(OrderProduct)
	err := c.cc.Invoke(ctx, OrderProducts_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderProductsClient) GetAll(ctx context.Context, in *GetListOrderProductRequest, opts ...grpc.CallOption) (*GetListOrderProductResponse, error) {
	out := new(GetListOrderProductResponse)
	err := c.cc.Invoke(ctx, OrderProducts_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderProductsClient) Update(ctx context.Context, in *UpdateOrderProduct, opts ...grpc.CallOption) (*OrderProduct, error) {
	out := new(OrderProduct)
	err := c.cc.Invoke(ctx, OrderProducts_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderProductsClient) Delete(ctx context.Context, in *OrderProductPrimaryKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OrderProducts_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderProductsServer is the server API for OrderProducts service.
// All implementations must embed UnimplementedOrderProductsServer
// for forward compatibility
type OrderProductsServer interface {
	Create(context.Context, *CreateOrderProduct) (*OrderProduct, error)
	GetById(context.Context, *OrderProductPrimaryKey) (*OrderProduct, error)
	GetAll(context.Context, *GetListOrderProductRequest) (*GetListOrderProductResponse, error)
	Update(context.Context, *UpdateOrderProduct) (*OrderProduct, error)
	Delete(context.Context, *OrderProductPrimaryKey) (*Empty, error)
	mustEmbedUnimplementedOrderProductsServer()
}

// UnimplementedOrderProductsServer must be embedded to have forward compatible implementations.
type UnimplementedOrderProductsServer struct {
}

func (UnimplementedOrderProductsServer) Create(context.Context, *CreateOrderProduct) (*OrderProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderProductsServer) GetById(context.Context, *OrderProductPrimaryKey) (*OrderProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedOrderProductsServer) GetAll(context.Context, *GetListOrderProductRequest) (*GetListOrderProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedOrderProductsServer) Update(context.Context, *UpdateOrderProduct) (*OrderProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrderProductsServer) Delete(context.Context, *OrderProductPrimaryKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrderProductsServer) mustEmbedUnimplementedOrderProductsServer() {}

// UnsafeOrderProductsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderProductsServer will
// result in compilation errors.
type UnsafeOrderProductsServer interface {
	mustEmbedUnimplementedOrderProductsServer()
}

func RegisterOrderProductsServer(s grpc.ServiceRegistrar, srv OrderProductsServer) {
	s.RegisterService(&OrderProducts_ServiceDesc, srv)
}

func _OrderProducts_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderProductsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderProducts_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderProductsServer).Create(ctx, req.(*CreateOrderProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderProducts_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderProductPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderProductsServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderProducts_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderProductsServer).GetById(ctx, req.(*OrderProductPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderProducts_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListOrderProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderProductsServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderProducts_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderProductsServer).GetAll(ctx, req.(*GetListOrderProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderProducts_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderProductsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderProducts_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderProductsServer).Update(ctx, req.(*UpdateOrderProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderProducts_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderProductPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderProductsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderProducts_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderProductsServer).Delete(ctx, req.(*OrderProductPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderProducts_ServiceDesc is the grpc.ServiceDesc for OrderProducts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderProducts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order_products.OrderProducts",
	HandlerType: (*OrderProductsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrderProducts_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _OrderProducts_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _OrderProducts_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrderProducts_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OrderProducts_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_products.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: product_category.proto

package catalog_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductCategoryService_CreateProductCategory_FullMethodName            = "/catalog_service.ProductCategoryService/CreateProductCategory"
	ProductCategoryService_GetProductCategoriesByProductID_FullMethodName  = "/catalog_service.ProductCategoryService/GetProductCategoriesByProductID"
	ProductCategoryService_GetProductCategoriesByCategoryID_FullMethodName = "/catalog_service.ProductCategoryService/GetProductCategoriesByCategoryID"
	ProductCategoryService_DeleteProductCategory_FullMethodName            = "/catalog_service.ProductCategoryService/DeleteProductCategory"
)

// ProductCategoryServiceClient is the client API for ProductCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCategoryServiceClient interface {
	CreateProductCategory(ctx context.Context, in *CreateProductCategoryRequest, opts ...grpc.CallOption) (*ProductCategory, error)
	GetProductCategoriesByProductID(ctx context.Context, in *GetProductCategoriesByProductIDRequest, opts ...grpc.CallOption) (*GetProductCategoriesByProductIDResponse, error)
	GetProductCategoriesByCategoryID(ctx context.Context, in *GetProductCategoriesByCategoryIDRequest, opts ...grpc.CallOption) (*GetProductCategoriesByCategoryIDResponse, error)
	DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryRequest, opts ...grpc.CallOption) (*Empty2, error)
}

type productCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCategoryServiceClient(cc grpc.ClientConnInterface) ProductCategoryServiceClient {
	return &productCategoryServiceClient{cc}
}

func (c *productCategoryServiceClient) CreateProductCategory(ctx context.Context, in *CreateProductCategoryRequest, opts ...grpc.CallOption) (*ProductCategory, error) {
	out := new(ProductCategory)
	err := c.cc.Invoke(ctx, ProductCategoryService_CreateProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) GetProductCategoriesByProductID(ctx context.Context, in *GetProductCategoriesByProductIDRequest, opts ...grpc.CallOption) (*GetProductCategoriesByProductIDResponse, error) {
	out := new(GetProductCategoriesByProductIDResponse)
	err := c.cc.Invoke(ctx, ProductCategoryService_GetProductCategoriesByProductID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) GetProductCategoriesByCategoryID(ctx context.Context, in *GetProductCategoriesByCategoryIDRequest, opts ...grpc.CallOption) (*GetProductCategoriesByCategoryIDResponse, error) {
	out := new(GetProductCategoriesByCategoryIDResponse)
	err := c.cc.Invoke(ctx, ProductCategoryService_GetProductCategoriesByCategoryID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoryServiceClient) DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryRequest, opts ...grpc.CallOption) (*Empty2, error) {
	out := new(Empty2)
	err := c.cc.Invoke(ctx, ProductCategoryService_DeleteProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCategoryServiceServer is the server API for ProductCategoryService service.
// All implementations must embed UnimplementedProductCategoryServiceServer
// for forward compatibility
type ProductCategoryServiceServer interface {
	CreateProductCategory(context.Context, *CreateProductCategoryRequest) (*ProductCategory, error)
	GetProductCategoriesByProductID(context.Context, *GetProductCategoriesByProductIDRequest) (*GetProductCategoriesByProductIDResponse, error)
	GetProductCategoriesByCategoryID(context.Context, *GetProductCategoriesByCategoryIDRequest) (*GetProductCategoriesByCategoryIDResponse, error)
	DeleteProductCategory(context.Context, *DeleteProductCategoryRequest) (*Empty2, error)
	mustEmbedUnimplementedProductCategoryServiceServer()
}

// UnimplementedProductCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductCategoryServiceServer struct {
}

func (UnimplementedProductCategoryServiceServer) CreateProductCategory(context.Context, *CreateProductCategoryRequest) (*ProductCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductCategory not implemented")
}
func (UnimplementedProductCategoryServiceServer) GetProductCategoriesByProductID(context.Context, *GetProductCategoriesByProductIDRequest) (*GetProductCategoriesByProductIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategoriesByProductID not implemented")
}
func (UnimplementedProductCategoryServiceServer) GetProductCategoriesByCategoryID(context.Context, *GetProductCategoriesByCategoryIDRequest) (*GetProductCategoriesByCategoryIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategoriesByCategoryID not implemented")
}
func (UnimplementedProductCategoryServiceServer) DeleteProductCategory(context.Context, *DeleteProductCategoryRequest) (*Empty2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductCategory not implemented")
}
func (UnimplementedProductCategoryServiceServer) mustEmbedUnimplementedProductCategoryServiceServer() {
}

// UnsafeProductCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCategoryServiceServer will
// result in compilation errors.
type UnsafeProductCategoryServiceServer interface {
	mustEmbedUnimplementedProductCategoryServiceServer()
}

func RegisterProductCategoryServiceServer(s grpc.ServiceRegistrar, srv ProductCategoryServiceServer) {
	s.RegisterService(&ProductCategoryService_ServiceDesc, srv)
}

func _ProductCategoryService_CreateProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).CreateProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_CreateProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).CreateProductCategory(ctx, req.(*CreateProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_GetProductCategoriesByProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoriesByProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).GetProductCategoriesByProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_GetProductCategoriesByProductID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).GetProductCategoriesByProductID(ctx, req.(*GetProductCategoriesByProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_GetProductCategoriesByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoriesByCategoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).GetProductCategoriesByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_GetProductCategoriesByCategoryID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).GetProductCategoriesByCategoryID(ctx, req.(*GetProductCategoriesByCategoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoryService_DeleteProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoryServiceServer).DeleteProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCategoryService_DeleteProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoryServiceServer).DeleteProductCategory(ctx, req.(*DeleteProductCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCategoryService_ServiceDesc is the grpc.ServiceDesc for ProductCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog_service.ProductCategoryService",
	HandlerType: (*ProductCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProductCategory",
			Handler:    _ProductCategoryService_CreateProductCategory_Handler,
		},
		{
			MethodName: "GetProductCategoriesByProductID",
			Handler:    _ProductCategoryService_GetProductCategoriesByProductID_Handler,
		},
		{
			MethodName: "GetProductCategoriesByCategoryID",
			Handler:    _ProductCategoryService_GetProductCategoriesByCategoryID_Handler,
		},
		{
			MethodName: "DeleteProductCategory",
			Handler:    _ProductCategoryService_DeleteProductCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_category.proto",
}

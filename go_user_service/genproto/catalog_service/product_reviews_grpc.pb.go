// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: product_reviews.proto

package catalog_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductReviewService_CreateProductReview_FullMethodName           = "/catalog_service.ProductReviewService/CreateProductReview"
	ProductReviewService_GetProductReviewByID_FullMethodName          = "/catalog_service.ProductReviewService/GetProductReviewByID"
	ProductReviewService_GetProductReviewsByProductID_FullMethodName  = "/catalog_service.ProductReviewService/GetProductReviewsByProductID"
	ProductReviewService_GetProductReviewsByCustomerID_FullMethodName = "/catalog_service.ProductReviewService/GetProductReviewsByCustomerID"
	ProductReviewService_UpdateProductReview_FullMethodName           = "/catalog_service.ProductReviewService/UpdateProductReview"
	ProductReviewService_DeleteProductReview_FullMethodName           = "/catalog_service.ProductReviewService/DeleteProductReview"
)

// ProductReviewServiceClient is the client API for ProductReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductReviewServiceClient interface {
	CreateProductReview(ctx context.Context, in *CreateProductReviewRequest, opts ...grpc.CallOption) (*ProductReview, error)
	GetProductReviewByID(ctx context.Context, in *ProductReviewPrimaryKey, opts ...grpc.CallOption) (*ProductReview, error)
	GetProductReviewsByProductID(ctx context.Context, in *GetProductReviewsByProductIDRequest, opts ...grpc.CallOption) (*GetProductReviewsByProductIDResponse, error)
	GetProductReviewsByCustomerID(ctx context.Context, in *GetProductReviewsByCustomerIDRequest, opts ...grpc.CallOption) (*GetProductReviewsByCustomerIDResponse, error)
	UpdateProductReview(ctx context.Context, in *UpdateProductReviewRequest, opts ...grpc.CallOption) (*ProductReview, error)
	DeleteProductReview(ctx context.Context, in *ProductReviewPrimaryKey, opts ...grpc.CallOption) (*Empty4, error)
}

type productReviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductReviewServiceClient(cc grpc.ClientConnInterface) ProductReviewServiceClient {
	return &productReviewServiceClient{cc}
}

func (c *productReviewServiceClient) CreateProductReview(ctx context.Context, in *CreateProductReviewRequest, opts ...grpc.CallOption) (*ProductReview, error) {
	out := new(ProductReview)
	err := c.cc.Invoke(ctx, ProductReviewService_CreateProductReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productReviewServiceClient) GetProductReviewByID(ctx context.Context, in *ProductReviewPrimaryKey, opts ...grpc.CallOption) (*ProductReview, error) {
	out := new(ProductReview)
	err := c.cc.Invoke(ctx, ProductReviewService_GetProductReviewByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productReviewServiceClient) GetProductReviewsByProductID(ctx context.Context, in *GetProductReviewsByProductIDRequest, opts ...grpc.CallOption) (*GetProductReviewsByProductIDResponse, error) {
	out := new(GetProductReviewsByProductIDResponse)
	err := c.cc.Invoke(ctx, ProductReviewService_GetProductReviewsByProductID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productReviewServiceClient) GetProductReviewsByCustomerID(ctx context.Context, in *GetProductReviewsByCustomerIDRequest, opts ...grpc.CallOption) (*GetProductReviewsByCustomerIDResponse, error) {
	out := new(GetProductReviewsByCustomerIDResponse)
	err := c.cc.Invoke(ctx, ProductReviewService_GetProductReviewsByCustomerID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productReviewServiceClient) UpdateProductReview(ctx context.Context, in *UpdateProductReviewRequest, opts ...grpc.CallOption) (*ProductReview, error) {
	out := new(ProductReview)
	err := c.cc.Invoke(ctx, ProductReviewService_UpdateProductReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productReviewServiceClient) DeleteProductReview(ctx context.Context, in *ProductReviewPrimaryKey, opts ...grpc.CallOption) (*Empty4, error) {
	out := new(Empty4)
	err := c.cc.Invoke(ctx, ProductReviewService_DeleteProductReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductReviewServiceServer is the server API for ProductReviewService service.
// All implementations should embed UnimplementedProductReviewServiceServer
// for forward compatibility
type ProductReviewServiceServer interface {
	CreateProductReview(context.Context, *CreateProductReviewRequest) (*ProductReview, error)
	GetProductReviewByID(context.Context, *ProductReviewPrimaryKey) (*ProductReview, error)
	GetProductReviewsByProductID(context.Context, *GetProductReviewsByProductIDRequest) (*GetProductReviewsByProductIDResponse, error)
	GetProductReviewsByCustomerID(context.Context, *GetProductReviewsByCustomerIDRequest) (*GetProductReviewsByCustomerIDResponse, error)
	UpdateProductReview(context.Context, *UpdateProductReviewRequest) (*ProductReview, error)
	DeleteProductReview(context.Context, *ProductReviewPrimaryKey) (*Empty4, error)
}

// UnimplementedProductReviewServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProductReviewServiceServer struct {
}

func (UnimplementedProductReviewServiceServer) CreateProductReview(context.Context, *CreateProductReviewRequest) (*ProductReview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductReview not implemented")
}
func (UnimplementedProductReviewServiceServer) GetProductReviewByID(context.Context, *ProductReviewPrimaryKey) (*ProductReview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductReviewByID not implemented")
}
func (UnimplementedProductReviewServiceServer) GetProductReviewsByProductID(context.Context, *GetProductReviewsByProductIDRequest) (*GetProductReviewsByProductIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductReviewsByProductID not implemented")
}
func (UnimplementedProductReviewServiceServer) GetProductReviewsByCustomerID(context.Context, *GetProductReviewsByCustomerIDRequest) (*GetProductReviewsByCustomerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductReviewsByCustomerID not implemented")
}
func (UnimplementedProductReviewServiceServer) UpdateProductReview(context.Context, *UpdateProductReviewRequest) (*ProductReview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductReview not implemented")
}
func (UnimplementedProductReviewServiceServer) DeleteProductReview(context.Context, *ProductReviewPrimaryKey) (*Empty4, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductReview not implemented")
}

// UnsafeProductReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductReviewServiceServer will
// result in compilation errors.
type UnsafeProductReviewServiceServer interface {
	mustEmbedUnimplementedProductReviewServiceServer()
}

func RegisterProductReviewServiceServer(s grpc.ServiceRegistrar, srv ProductReviewServiceServer) {
	s.RegisterService(&ProductReviewService_ServiceDesc, srv)
}

func _ProductReviewService_CreateProductReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductReviewServiceServer).CreateProductReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductReviewService_CreateProductReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductReviewServiceServer).CreateProductReview(ctx, req.(*CreateProductReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductReviewService_GetProductReviewByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductReviewPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductReviewServiceServer).GetProductReviewByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductReviewService_GetProductReviewByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductReviewServiceServer).GetProductReviewByID(ctx, req.(*ProductReviewPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductReviewService_GetProductReviewsByProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductReviewsByProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductReviewServiceServer).GetProductReviewsByProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductReviewService_GetProductReviewsByProductID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductReviewServiceServer).GetProductReviewsByProductID(ctx, req.(*GetProductReviewsByProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductReviewService_GetProductReviewsByCustomerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductReviewsByCustomerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductReviewServiceServer).GetProductReviewsByCustomerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductReviewService_GetProductReviewsByCustomerID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductReviewServiceServer).GetProductReviewsByCustomerID(ctx, req.(*GetProductReviewsByCustomerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductReviewService_UpdateProductReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductReviewServiceServer).UpdateProductReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductReviewService_UpdateProductReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductReviewServiceServer).UpdateProductReview(ctx, req.(*UpdateProductReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductReviewService_DeleteProductReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductReviewPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductReviewServiceServer).DeleteProductReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductReviewService_DeleteProductReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductReviewServiceServer).DeleteProductReview(ctx, req.(*ProductReviewPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductReviewService_ServiceDesc is the grpc.ServiceDesc for ProductReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog_service.ProductReviewService",
	HandlerType: (*ProductReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProductReview",
			Handler:    _ProductReviewService_CreateProductReview_Handler,
		},
		{
			MethodName: "GetProductReviewByID",
			Handler:    _ProductReviewService_GetProductReviewByID_Handler,
		},
		{
			MethodName: "GetProductReviewsByProductID",
			Handler:    _ProductReviewService_GetProductReviewsByProductID_Handler,
		},
		{
			MethodName: "GetProductReviewsByCustomerID",
			Handler:    _ProductReviewService_GetProductReviewsByCustomerID_Handler,
		},
		{
			MethodName: "UpdateProductReview",
			Handler:    _ProductReviewService_UpdateProductReview_Handler,
		},
		{
			MethodName: "DeleteProductReview",
			Handler:    _ProductReviewService_DeleteProductReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_reviews.proto",
}
